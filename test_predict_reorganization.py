#!/usr/bin/env python3
"""
Test de validation de la r√©organisation du pipeline predict.py

V√©rifie que la structure de sortie correspond aux sp√©cifications.
"""

import os
import tempfile
import shutil
from pathlib import Path


def test_output_structure():
    """Teste la structure de sortie du pipeline"""

    # Structure attendue
    expected_structure = {
        "postprocessing/figures/periodograms/rv/": ["*.png"],
        "postprocessing/figures/periodograms/latent/": ["*.png"],
        "postprocessing/figures/latent/": [
            "distance_distribution.png",
            "marginal_distributions.png",
            "activity_perturbations.png",
            "latent_space_3d.png",
        ],
        "postprocessing/figures/correlations/": ["correlation_matrix.png"],
        "postprocessing/figures/": ["mcmc_orbital_fit.png"],
        "postprocessing/data/": [
            "metrics.csv",
            "periodograms.npz",
            "latent_distances.npz",
        ],
    }

    print("Structure de sortie attendue :")
    print("=" * 50)

    for folder, files in expected_structure.items():
        print(f"üìÅ {folder}")
        for file in files:
            print(f"  üìÑ {file}")
        print()


def validate_function_signature():
    """Valide la signature de la fonction main()"""

    from src.modeling.predict import main
    import inspect

    sig = inspect.signature(main)
    params = list(sig.parameters.keys())

    expected_params = [
        "experiment_dir",
        "fap_threshold",
        "exclude_width_frac",
        "min_period",
        "max_period",
        "n_periods",
        "zoom_frac",
        "batch_size",
        "perturbation_value",
        "overrides",
    ]

    print("Validation de la signature de main() :")
    print("=" * 50)

    for param in expected_params:
        if param in params:
            print(f"‚úÖ {param}")
        else:
            print(f"‚ùå {param} manquant")

    print(f"\nSignature compl√®te: {sig}")


def validate_no_main_execution():
    """V√©rifie qu'il n'y a pas de code d'ex√©cution directe"""

    with open(
        "/home/tliopis/Codes/exoplanets_llopis_mary_2025/src/modeling/predict.py", "r"
    ) as f:
        content = f.read()

    print("Validation de l'absence d'ex√©cution directe :")
    print("=" * 50)

    if 'if __name__ == "__main__"' in content:
        print("‚ùå Le fichier contient encore du code d'ex√©cution directe")
    else:
        print("‚úÖ Aucun code d'ex√©cution directe trouv√©")

    # V√©rifier que la fonction main() est bien d√©finie
    if "def main(" in content:
        print("‚úÖ La fonction main() est d√©finie")
    else:
        print("‚ùå La fonction main() n'est pas trouv√©e")


if __name__ == "__main__":
    print("Test de validation de la r√©organisation predict.py")
    print("=" * 60)
    print()

    test_output_structure()
    print()
    validate_function_signature()
    print()
    validate_no_main_execution()

    print("\nüéØ R√©organisation termin√©e avec succ√®s !")
    print("\nUtilisation :")
    print("from src.modeling.predict import main")
    print('main(experiment_dir="experiments/exp1")')
