#!/usr/bin/env python3
"""
Script de diagnostic pour identifier les probl√®mes dans Colab.
"""

import yaml
import os
import torch
from pathlib import Path


def diagnose_colab_issue():
    """Diagnostic complet pour identifier le probl√®me sur Colab."""

    print("üîç DIAGNOSTIC COLAB - D√©but")
    print("=" * 50)

    # Test 1: Chargement de la configuration
    print("\n1Ô∏è‚É£  Test du chargement de configuration...")
    try:
        config_path = "src/modeling/configs/colab_config.yaml"
        with open(config_path, "r") as f:
            config = yaml.safe_load(f)
        print(f"‚úÖ Configuration charg√©e: {config_path}")
        print(f"üìÅ data_root_dir: {config.get('data_root_dir')}")
    except Exception as e:
        print(f"‚ùå Erreur chargement config: {e}")
        return

    # Test 2: V√©rification des chemins de donn√©es
    print("\n2Ô∏è‚É£  Test de l'existence des chemins de donn√©es...")
    data_root_dir = config.get("data_root_dir", "data")

    # Chemins qui seront construits par le dataset
    expected_paths = [
        f"{data_root_dir}/rv_datachallenge/Sun_B57001_E61001_planet-FallChallenge1/HARPN/STAR1136_HPN_flux_YVA.npy",
        f"{data_root_dir}/rv_datachallenge/Sun_B57001_E61001_planet-FallChallenge1/HARPN/STAR1136_HPN_Analyse_material.p",
        f"{data_root_dir}/rv_datachallenge/Sun_B57001_E61001_planet-FallChallenge1/HARPN/STAR1136_HPN_Analyse_summary.csv",
        f"{data_root_dir}/rv_datachallenge/masks/G2_mask.txt",
    ]

    for path in expected_paths:
        if os.path.exists(path):
            print(f"‚úÖ Trouv√©: {path}")
        else:
            print(f"‚ùå Manquant: {path}")

    # Test 3: V√©rification des imports
    print("\n3Ô∏è‚É£  Test des imports...")
    try:
        from src.dataset import SpectrumDataset

        print("‚úÖ Import SpectrumDataset r√©ussi")
    except Exception as e:
        print(f"‚ùå Erreur import SpectrumDataset: {e}")
        return

    try:
        from src.modeling.models import AESTRA

        print("‚úÖ Import AESTRA r√©ussi")
    except Exception as e:
        print(f"‚ùå Erreur import AESTRA: {e}")
        return

    # Test 4: Test de cr√©ation du dataset (avec gestion d'erreur d√©taill√©e)
    print("\n4Ô∏è‚É£  Test de cr√©ation du dataset...")
    try:
        print("üìä Tentative de cr√©ation du dataset...")
        dataset = SpectrumDataset(
            n_specs=10,  # Petit test
            wavemin=config.get("wavemin", None),
            wavemax=config.get("wavemax", None),
            data_dtype=getattr(torch, config.get("data_dtype", "float32")),
            data_root_dir=data_root_dir,
        )
        print("‚úÖ Dataset cr√©√© avec succ√®s!")
        print(f"üìà Spectres: {dataset.n_specs}, Pixels: {dataset.n_pixels}")
    except FileNotFoundError as e:
        print(f"‚ùå Fichier non trouv√©: {e}")
        print("üí° Suggestion: V√©rifiez que les donn√©es sont bien dans Google Drive")
    except Exception as e:
        print(f"‚ùå Erreur dataset: {e}")
        print(f"üîç Type d'erreur: {type(e).__name__}")
        import traceback

        traceback.print_exc()

    # Test 5: Test de l'environnement CUDA
    print("\n5Ô∏è‚É£  Test de l'environnement CUDA...")
    if torch.cuda.is_available():
        print(f"‚úÖ CUDA disponible: {torch.cuda.get_device_name(0)}")
        print(
            f"üîã M√©moire GPU: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB"
        )
    else:
        print("‚ö†Ô∏è  CUDA non disponible - utilisation du CPU")

    # Test 6: Test d'espace disque
    print("\n6Ô∏è‚É£  Test de l'espace disque...")
    try:
        import shutil

        total, used, free = shutil.disk_usage("/")
        print(f"üíæ Espace disque libre: {free / 1e9:.1f} GB")

        if Path(data_root_dir).exists():
            total_drive, used_drive, free_drive = shutil.disk_usage(data_root_dir)
            print(f"‚òÅÔ∏è  Espace Google Drive libre: {free_drive / 1e9:.1f} GB")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de v√©rifier l'espace disque: {e}")

    print("\nüéØ DIAGNOSTIC TERMIN√â")
    print("\nüí° CONSEILS DE D√âPANNAGE:")
    print("   ‚Ä¢ V√©rifiez que Google Drive est mont√©: drive.mount('/content/drive')")
    print("   ‚Ä¢ V√©rifiez que les donn√©es sont dans le bon dossier Google Drive")
    print("   ‚Ä¢ Essayez de red√©marrer le runtime Colab si probl√®me de m√©moire")
    print("   ‚Ä¢ V√©rifiez les permissions d'acc√®s aux fichiers")


if __name__ == "__main__":
    diagnose_colab_issue()
